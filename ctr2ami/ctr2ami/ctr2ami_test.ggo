package punk

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_mergeEnv(t *testing.T) {
	testCases := []struct {
		image    []string
		user     []string
		expected []string
		err      error
	}{
		{
			image:    []string{},
			user:     []string{},
			expected: []string{},
			err:      nil,
		},
		{
			image:    []string{""},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{"abc"},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{"abc", "xyz"},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{"", "xyz"},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{"xyz", ""},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{"xyz=abc", ""},
			user:     []string{},
			expected: nil,
			err:      errInvalidEnvironmentImage,
		},
		{
			image:    []string{},
			user:     []string{""},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{},
			user:     []string{"xyz"},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{},
			user:     []string{"abc", "xyz"},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{},
			user:     []string{"", "abc"},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{},
			user:     []string{"abc", ""},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{},
			user:     []string{"abc=xyz", ""},
			expected: nil,
			err:      errInvalidEnvironmentUser,
		},
		{
			image:    []string{"PATH=/bin:/sbin", "HOME=/"},
			user:     []string{"abc=xyz"},
			expected: []string{"PATH=/bin:/sbin", "HOME=/", "abc=xyz"},
			err:      nil,
		},
		{
			image:    []string{},
			user:     []string{"abc=xyz"},
			expected: []string{"abc=xyz"},
			err:      nil,
		},
		{
			image:    []string{"xyz=123"},
			user:     []string{},
			expected: []string{"xyz=123"},
			err:      nil,
		},
		{
			image:    []string{"PATH=/bin:/sbin", "HOME=/"},
			user:     []string{"PATH=/bin:/usr/bin"},
			expected: []string{"PATH=/bin:/usr/bin", "HOME=/"},
			err:      nil,
		},
		{
			image:    []string{"PATH=/bin:/sbin", "HOME=/"},
			user:     []string{"PATH=/bin:/usr/bin", "HOME=/nonexistent"},
			expected: []string{"PATH=/bin:/usr/bin", "HOME=/nonexistent"},
			err:      nil,
		},
		{
			image:    []string{"PATH=/bin:/sbin", "HOME=/"},
			user:     []string{"abc=xyz", "PATH=/bin:/usr/bin"},
			expected: []string{"PATH=/bin:/usr/bin", "HOME=/", "abc=xyz"},
			err:      nil,
		},
		{
			image:    []string{"PATH=/bin:/sbin", "HOME=/"},
			user:     []string{"abc=xyz", "PATH=/bin:/usr/bin", "xyz=123"},
			expected: []string{"PATH=/bin:/usr/bin", "HOME=/", "abc=xyz", "xyz=123"},
			err:      nil,
		},
	}
	for _, tc := range testCases {
		actual, err := mergeEnv(tc.image, tc.user)
		assert.Equal(t, tc.err, err)
		assert.Equal(t, tc.expected, actual)
	}
}

func Test_remove(t *testing.T) {
	testCasesStr := []struct {
		slice    []string
		index    int
		expected []string
		errStr   string
	}{
		{
			slice:    []string{},
			index:    100,
			expected: nil,
			errStr:   "slice bounds out of range",
		},
		{
			slice:    []string{""},
			index:    0,
			expected: []string{},
			errStr:   "",
		},
		{
			slice:    []string{"a", "b", "c"},
			index:    1,
			expected: []string{"a", "c"},
			errStr:   "",
		},
	}
	for _, tc := range testCasesStr {
		actual, err := remove(tc.slice, tc.index)
		if len(tc.errStr) > 0 {
			assert.Contains(t, err.Error(), tc.errStr)
		}
		assert.Equal(t, tc.expected, actual)
	}

	testCasesInt := []struct {
		slice    []int
		index    int
		expected []int
		errStr   string
	}{
		{
			slice:    []int{},
			index:    100,
			expected: nil,
			errStr:   "slice bounds out of range",
		},
		{
			slice:    []int{76},
			index:    0,
			expected: []int{},
			errStr:   "",
		},
		{
			slice:    []int{7, 8, 9},
			index:    1,
			expected: []int{7, 9},
			errStr:   "",
		},
	}
	for _, tc := range testCasesInt {
		actual, err := remove(tc.slice, tc.index)
		if len(tc.errStr) > 0 {
			assert.Contains(t, err.Error(), tc.errStr)
		} else {
			assert.Nil(t, err)
		}
		assert.Equal(t, tc.expected, actual)
	}
}

func Test_createZVol(t *testing.T) {
	dataset, err := createZVol("punk/images", "abc", "1G")
	if err != nil {
		t.Fatal(err)
	}
	err = makeFilesystem(*dataset, fsTypeExt4)
	if err != nil {
		t.Fatal(err)
	}
	err = mountZVol(*dataset, "/mnt")
	if err != nil {
		t.Fatal(err)
	}
}
